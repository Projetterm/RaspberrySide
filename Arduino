/*---------- Include ----------*/
#include <Wire.h>
#include "RTClib.h"
#include <SoftwareSerial.h>
#include <string>
#include <Servo.h>
/* ---------------------------*/

/*---------- déclaration objets ----------*/
RTC_DS1307 RTC;
SoftwareSerial mySerial(10, 11); //* RX is digital pin 10 (connect to TX of other device)
 //* TX is digital pin 11 (connect to RX of other device)
Servo myServo;
/* ---------------------------------------*/

// declaration fonctions
boolean powerOn();
boolean DTRAN();
boolean orderDRSBP();
boolean verifH();
void orderSRSBP();
void envRSB();
void Reset();
void Crypto();
boolean Wait();
// variables
boolean mPowerOn = false;
boolean verfD = false,verfS = false;
boolean PHDIODE;

void setup()   
{
   mySerial.begin(9600);   
   pinMode(13,OUTPUT);   // utilise la led
   digitalWrite(13, LOW);
   pinMode(12,INPUT);   
   digitalWrite(12, HIGH ); // pullup de la pin 12
   Serial.begin(9600);
   Wire.begin();      
   RTC.begin(); 
   //RTC.adjust(DateTime(__DATE__, __TIME__));
   pinMode(2,OUTPUT);//sotie commande allumage 
   pinMode(A0,INPUT);
   pinMode(4,INPUT); // entrer qui simule l'heure
}

/* ------------  fonction principale ------------ */
void loop() 
{
  Serial.print("loop\n");
  if (mPowerOn != true)// on regarde si on doit allumer le RSB
  {
    Serial.print("p1");
    if (powerOn() == true)
    {
      Serial.print("power");
      digitalWrite(2,HIGH); 
    }
  }
  else
  {
    Serial.print("else");
    envRSB();
  }
  if(mySerial.available())
  {
    Serial.print("pass");
     Serial.print("a = ");
     char  a = mySerial.read();
     Serial.println(a);
    if (a == 'C')
    {
      Crypto();
    }  
}
    
}
/* ---------------------------------------------- */




/* ------------  définition fonction  ------------ */
boolean powerOn()
{
  Serial.print("powerOn()");
  if(mPowerOn != true)
  {
    Serial.print("ifP");
    if( /*DTRAN() == true ||*/ verifH() == true)// on regarde si c'est l'heure ou si on a un signal sur la photo diode
    {
      Serial.print("if2");
      mPowerOn = true;
      return true;
    }
  }
  else
  {
    Serial.print("elese");
    return false;
  }
}

boolean DTRAN() // transforme l'entrée analogique en binaire
{
  int testdiode = analogRead(A0)/1023;
  if (testdiode < 1)
  {
    PHDIODE = true;
  }
  else 
  {
    PHDIODE = false ;
  }
  return PHDIODE;
}

boolean orderDRSBP()//envoie l'orde au RSB de commencer la transmission 
{
  if (PHDIODE == true || DTRAN() == true)
  {
   // mySerial.write(0,DEC);
    Serial.println (0,DEC);
    return true;
  }
  else
  {
    return false;
  }
}

void orderSRSBP()// envoie l'ordre au RSB de filmer
{
    mySerial.write("2");
    Serial.println (1,DEC);
}

void envRSB()
{
    if ( verfD == false)// si on a pas deja executer orderDRSBP()
    {
      if(orderDRSBP() == true && mPowerOn == true)
      {
        verfD = true;
      } 
    }
    if (verfS == false && mPowerOn == true && verifH() == true)// on a pas deja executer orderSRSBP()
    { 
        orderSRSBP();
        verfS = true;
    }
}

boolean verifH()
{
  Serial.print("VerifH()");
  DateTime now = RTC.now();  //récupére les donnés du rtc
  uint8_t minutes = now.minute(),heure = now.hour();
  boolean Led = digitalRead(4);
  if( heure == 10 /*&& minutes == 8*/ || heure == 18 || heure == 22 || Led == HIGH)
  {
    Serial.print("VerifH()= true");
    return true;
  }
  else
  {
    Serial.print("VerifH()= false");
    return false;
  }
}

void Crypto() 
{
  int a;
  boolean C = false;
  myServo.attach(9);
  boolean Co = false;
    a = mySerial.read();
    a = (a-48)*2;
    Serial.print("bits =");
     Serial.println(a);
     char SeqResult[a];
    Serial.println("first while crypto");
    char SeqServo[a];
    Serial.println("beforfor");
    for( int i = 0 ; i < a; i++)
    {
      Serial.println("for");
      while(mySerial.available() != 1)
      {
        Serial.println("waitRSB");
      }
     if( mySerial.available())
     { 
        Serial.println(i);
        SeqServo[i] = mySerial.read();
        Serial.println(SeqServo[i]);
        mySerial.write("o");
      }
      if( i == 15){ Co = true;}
    }
      while ( DTRAN() != true)
      {//wait
       Serial.println("wait");
      } //1er clock
      for (int i = 0; i < a; i++)
      {  
        boolean Check = false;
        if( SeqServo[i] == '1')
        {
          Serial.print("servopos1");
          myServo.write(140);
        }
        if( SeqServo[i] == '0')
        {
          Serial.print("servopos0");
          myServo.write(10);
        }
      
        unsigned long tpsFinal=millis()+1000;
        SeqResult[i] = '0';
        while (millis()< tpsFinal)
        {
          Serial.println("WaitCWile");
          if ( DTRAN() == true)  SeqResult[i] = '1';
        }
      }    
    Serial.println("S");
    mySerial.write("S");
    while(mySerial.read() != 'o'){Serial.println("wait RSB o");}
    for( int i = 0; i < a; i++)
    {
      Serial.println(SeqResult[i]);
      mySerial.write(SeqResult[i]);
      while(mySerial.read() != 'v'){Serial.println("wait RSB v");}
    }
  }

/*void Reset()
{
  EtatD = false;
  mPowerOn = false;
  verfD = false;
  verfS = false;
}*/
